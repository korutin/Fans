// Integra_08R
// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
// Интеграционный тест (первая часть для REESTR) для проверки работы функционала формирования запроса на составление списка владельцев и обработки списка.
// Возвращаемое значение 0 - passed   (тест прошел)
//                       1 - fail     (тест не прошел)
//                       2 - broken   (тест вызвал исключение)
//                       3 - canceled (тест упал при создание предусловия/окружения)
// Выходные параметры:
//           tt -  таблица T:=Table(scenario str, result int, log List)  с одной записью
//                                      scenario : символьный код тестового сценария в системе тестирования
//                                      Result   : 0 - passed (тест прошел); 1 - fail (тест не прошел); 2 - broken (тест вызвал исключение); 3 - canceled (тест упал при создание предусловия/окружения)
//                                      tStart   : дата/время запуска теста
//                                      tEnd     : дата/время окончания/падения теста
//                                      log      : список строк с ошибками

Uses _QA, _TYPES;
var err_c,  f_date, CrDt_et, result, tEnd, tStart;
var logK;
var ISSUER, EMI_UK, SHARE, OWNER_ID, OWNER_ID2, CLIENT_ID, CLIENT_ID2, CLIENT_ID3, NOMINI_ID, NDCD_CLIENT_ID, ND_CLIENT_ID, NRD_ID, OWNERF_ID3, FBROK_ID,
    PLACE_ID;
var __tFace_OWNER, __tFace_OWNER2, __tFace_OWNER3, __tClient_OwnerAcc, __tFace_FBrok, __tClient_PLACE,
    __tClient_OwnerAcc2, __tClient_OwnerAcc3, __tFace_NOMIMI,__tClient_NominiAcc, __tClient_NominiCDAcc;
var Rest_Own, Rest_Own2, Rest_Own3, Rest_Own4, Rest_Own5, OwnCreateMoment, issueMoment;
var QA_CODE := 'Integra_08', F_ID, SELF_ID, SE1, SE2, SE3, SE4, SE5, GSSPIS;
var T_SHARE_HOLDERS, T_SHARE_BALANCE;
var their_doc_date, their_doc_num, r_date, resp_date, D_DATE, REQ_ID, DOC_json, LBR, RBR, LSQ, RSQ;
// $meta begin
__tFace_OWNER    := _TYPES->tFace;
__tFace_OWNER2   := _TYPES->tFace;
__tFace_OWNER3   := _TYPES->tFace;
__tFace_FBrok    := _TYPES->tFace;
__tClient_OwnerAcc    := _TYPES->tClient;
__tClient_OwnerAcc2   := _TYPES->tClient;
__tClient_OwnerAcc3   := _TYPES->tClient;
__tClient_NominiAcc   := _TYPES->tClient;
__tClient_NominiCDAcc := _TYPES->tClient;
__tClient_PLACE       := _TYPES->tClient;
__tFace_NOMIMI   := _TYPES->tFace;
// $meta end


// ------------------------------------------------------------------------------------------------------------------------
// ------------------------------------   Pre-Condition    ----------------------------------------------------------------
// Временные метки для создания объектов участвующих в тестах
D_DATE          := now;
their_doc_date  := now - 1;
their_doc_num   := '17/985';
r_date          := D_DATE + 6;
resp_date       := date(D_DATE + 8);
CrDt_et         := date('11.01.2020');                // Дата создания всего и вся в справочниках
OwnCreateMoment := date('11.01.2020');
issueMoment     := date('11.01.2020');
f_date    := clear(date('31.12.1899'));
Rest_Own  := 2.1232;
Rest_Own2 := 4.543;
Rest_Own3 := 1.5;
Rest_Own4 := 1.9;
Rest_Own5 := 7.94;
LBR  := '{'; RBR := '}'; LSQ := '['; RSQ := ']';
try    
    GSSPIS := GS_Create;
    _F_INTGR_RE_AQ->Integra_08a_setUp(CrDt_et, GSSPIS);
    ISSUER := _QA->id(GS_VAL(GSSPIS, '__tFace_ISS'));
    NRD_ID := int(GS_VAL(GSSPIS, 'NRD_ID'));
    SHARE  := int(GS_VAL(GSSPIS, 'SHARE'));
    EMI_UK  := int(GS_VAL(GSSPIS, 'EMI_UK'));
    
   
    // // -----------------------------------------------------------------------------
    // // Открыть лицевой счет 1-го владельца - физического лица
    // OWNER_ID      := _QA->InsFaceByAlias_t('IndvRus01', Date(OwnCreateMoment), __tFace_OWNER);  
    // CLIENT_ID     := _QA->InsClientByAlias_t('OW-01',  Date(OwnCreateMoment), OWNER_ID, ISSUER, null, __tClient_OwnerAcc);
    // 
    // // -----------------------------------------------------------------------------
    // // Открыть лицевой счет 2-го владельца - физического лица
    // OWNER_ID2     := _QA->InsFaceByAlias_t('IndvRus02', Date(OwnCreateMoment), __tFace_OWNER2);  
    // CLIENT_ID2    := _QA->InsClientByAlias_t('OW-01',  Date(OwnCreateMoment), OWNER_ID2, ISSUER, null, __tClient_OwnerAcc2);
    // 
    // // -----------------------------------------------------------------------------
    // // Открыть лицевой счет 3-го владельца - физического лица
    // OWNERF_ID3    := _QA->InsFaceByAlias_t('JurFrgnFFINBrokerage', Date(OwnCreateMoment), __tFace_OWNER3);  
    // CLIENT_ID3    := _QA->InsClientByAlias_t('OW-01',  Date(OwnCreateMoment), OWNERF_ID3, ISSUER, null, __tClient_OwnerAcc3);
    // 
    
    // Открыть лицевой счет номинальщика (Первый брокер)
    // Создать юр.лицо - нижележащий депозитарий.
    FBROK_ID      := _QA->InsFaceByAlias_t('JurRusBrokFirst', Date(OwnCreateMoment),__tFace_FBrok);    
    _QA->Produce_RandomDepo_t(__tClient_NominiAcc,  List('TYPE_=2', 'SUBTYPE=2', 'NUMBER=Н00004000'));
    __tClient_PLACE.@EDIT;
    __tClient_PLACE._FACE   := FBROK_ID;
    __tClient_PLACE._D_OPEN := OwnCreateMoment;    
    __tClient_PLACE.@POST;
    ND_CLIENT_ID := _QA->InsClient_t(__tClient_NominiAcc);
    
    // 
    // Открыть лицевой счет номинальщика (НРД)
    NDCD_CLIENT_ID := _QA->InsClientByAlias_t('CD-01',  Date(OwnCreateMoment), NRD_ID, ISSUER, null, __tClient_NominiCDAcc);

        
    // // -----------------------------------------------------------------------------
    // // Выдать паи владельцу на лицевой счет CLIENT_ID 
    // SE1 := _QA->IssueEtf_ext(DateTime(issueMoment), EMI_UK, CLIENT_ID, SHARE, Rest_Own, '');
    // 
    // // -----------------------------------------------------------------------------
    // // Выдать паи владельцу на лицевой счет CLIENT_ID2 
    // SE2 := _QA->IssueEtf_ext(DateTime(issueMoment), EMI_UK, CLIENT_ID2, SHARE, Rest_Own2, '');

    // -----------------------------------------------------------------------------
    // Выдать паи номинальщику на лицевой счет ND_CLIENT_ID
    SE3 := _QA->IssueEtf_ext(DateTime(issueMoment), EMI_UK, ND_CLIENT_ID, SHARE, Rest_Own3, '');

    // -----------------------------------------------------------------------------
    // Выдать паи номинальщику НРД на лицевой счет NDCD_CLIENT_ID
    SE4 := _QA->IssueEtf_ext(DateTime(issueMoment), EMI_UK, NDCD_CLIENT_ID, SHARE, Rest_Own4, '');

    // // -----------------------------------------------------------------------------
    // // Выдать паи владельцу на лицевой счет CLIENT_ID3
    // SE5 := _QA->IssueEtf_ext(DateTime(issueMoment), EMI_UK, CLIENT_ID3, SHARE, Rest_Own5, '');

    DOC_json := LBR+[
                     "CA_REFERENCE"  : "CA_092332425",
                     "MESS_FUNC"     : "NEWM",
                     "ISSUER"        : ]+str(ISSUER)+[,  
                     "INI_TYPE"      : "ISSR",
                     "INI_TYPE_NARR" : "",
                     "INFO_TYPE"     : "RGHL",
                     "INFO_TYPE_NARRATIVE" : "",
                     "FROM_FACE"     : ] + str(MyFace) + [, 
                     "B_TYPE"        : 19, 
                     "B_DATE"        : "]+ str(their_doc_date)+[",
                     "B_NUM"         : "]+ their_doc_num +[",
                     "IS_BANKREQ"    : 0,
                     "TEMPLATE"      : "0001",
                     "R_DATE"        : "] + str(r_date)+[",
                     "RESPONSE_DATE" : "] + str(resp_date) +[",
                     "_BASIS"        : ] + LSQ +  [
                                        {
                                          "GROUND_CODE"   : "OTHR",
                                          "NARRATIVE"     : "Для исполнения эмитентом обязанностей, предусмотренных  п. 14 ст. 7 ФЗ от 07.08.2001 №115-ФЗ",
                                          "GROUND_NAME"   : "GROUND_NAME 1",
                                          "__SUBORDINATE" : ]+LSQ+[ "SA01", "SA02", "SA03" ] + RSQ + [
                                        },
                                        {
                                          "GROUND_CODE"   : "RGHD",
                                          "NARRATIVE"     : "Предоставление списка лиц, осуществляющих права по ценным бумагам (статья 8.7-1 ФЗ О РЦБ)",
                                          "GROUND_NAME"   : "GROUND_NAME 2",
                                          "__SUBORDINATE" : ]+LSQ+[ "SU01" ,"SU02" ] + RSQ + [
                                        } ] +
                     RSQ + #13+#10+
                RBR;


except
    ListAdd(LOGK, 'QA-System: В тесте '+QA_CODE + ' не получилось создать окружение. Exception [' + Exception.text + ']');
    result := _QA.CANCELED;
    tEnd   := now;    
end;


// --------------------------------------------------------------------------------
// ------  Выполнение тестового сценария
try
    // Тестируемая функция
    //$xxxxxxxxxxxx(SELF, ......);
    dummy
except
      //raise('QA-System: Тест '+QA_CODE + ' закончился падением');
      ListAdd(LOGK, 'QA-System: Тест '+QA_CODE + ' закончился падением')
end;

// if (f_date = Dt_et) then
//     ListAdd(LOGK, '   B_DATE  = B_DATE_et')
// else
//     ListAdd(LOGK, ' * B_DATE  != B_DATE_et {' + str(f_date)+ ' | ' + str(Dt4_et) + ' }');
//     inc(err_c);
// end;

// --------------------------------------------------------------------------------
// Post-condition : Удаляем окружение
if _F_INTGR_RE_AQ.EnvDestroy = 1 then
    if ~isBlank(CLIENT_ID) then
       ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], CLIENT_ID);
       ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], CLIENT_ID);
    end;
    if ~isBlank(OWNER_ID ) then
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], OWNER_ID );
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], OWNER_ID );
    end;

    if ~isBlank(CLIENT_ID2) then
       ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], CLIENT_ID2);
       ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], CLIENT_ID2);
    end;
    if ~isBlank(OWNER_ID2 ) then
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], OWNER_ID2 );
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], OWNER_ID2 );
    end;
    
    if ~isBlank(CLIENT_ID3) then
       ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], CLIENT_ID3);
       ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], CLIENT_ID3);
    end;
    if ~isBlank(OWNERF_ID3 ) then
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], OWNERF_ID3 );
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], OWNERF_ID3 );
    end;
    
end;


// -------------------------------------- Оформляем результат --------------------------------------------------------------
// try
//     _QA->ResultRegistration(%tt, QA_CODE, result, logK, tStart, Now);
// except
//     raise('QA-System: Тест '+QA_CODE + ' не получилось исполнить.');
// end;
// %tt._result;