// Integra_09
// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
// UNIT тестовая функция для проверки работы мета-функции Parse_DISCLOSURE_REQUEST():AnyType
// Возвращаемое значение 0 - passed   (тест прошел)
//                       1 - fail     (тест не прошел)
//                       2 - broken   (тест вызвал исключение)
//                       3 - canceled (тест упал при создание предусловия/окружения)
// Выходные параметры:
//           tt -  таблица T:=Table(scenario str, result int, log List)  с одной записью
//                                      scenario : символьный код тестового сценария в системе тестирования
//                                      Result   : 0 - passed (тест прошел); 1 - fail (тест не прошел); 2 - broken (тест вызвал исключение); 3 - canceled (тест упал при создание предусловия/окружения)
//                                      tStart   : дата/время запуска теста
//                                      tEnd     : дата/время окончания/падения теста
//                                      log      : список строк с ошибками
var err_c,  f_date, CrDt_et, result, tEnd, tStart;
var logK;
var ISSUER, EMI_UK, SHARE, OWNER_ID, OWNER_ID2, CLIENT_ID, CLIENT_ID2, CLIENT_ID3, NOMINI_ID, NCLIENT_ID, NRD_ID, OWNERF_ID3;
var __tFace_OWNER, __tFace_OWNER2, __tFace_OWNER3, __tClient_OwnerAcc, __tClient_OwnerAcc2, __tClient_OwnerAcc3, __tFace_NOMIMI,__tClient_NominiAcc;
var Rest_Own, Rest_Own2, Rest_Own3, Rest_Own4, OwnCreateMoment, issueMoment;
var QA_CODE := 'Integra_08', F_ID, SELF_ID, SE1, SE2, SE3;

// $meta begin
__tFace_OWNER    := _TYPES->tFace;
__tFace_OWNER2   := _TYPES->tFace;
__tFace_OWNER3   := _TYPES->tFace;
__tClient_OwnerAcc  := _TYPES->tClient;
__tClient_OwnerAcc2 := _TYPES->tClient;
__tClient_OwnerAcc3 := _TYPES->tClient;
__tClient_NominiAcc := _TYPES->tClient;
__tFace_NOMIMI   := _TYPES->tFace;
// $meta end


// ------------------------------------------------------------------------------------------------------------------------
// ------------------------------------   Pre-Condition    ----------------------------------------------------------------
// Создание Лица с указанием его реквизитов напрямую
CrDt_et         := date('11.01.2020');                // Дата создания всего в справочниках
OwnCreateMoment := date('11.01.2020');
issueMoment     := date('11.01.2020');
f_date    := clear(date('31.12.1899'));
Rest_Own  := 2.1232;
Rest_Own2 := 4.543;
Rest_Own3 := 1.5;
Rest_Own4 := 1.9;
try    
    _F_INTGR_REE_AQ->Integra_08_setUp(CrDt_et);
    ISSUER := _F_INTGR_REE_AQ.Integra_08_setUp.ISSUER;
    EMI_UK := _F_INTGR_REE_AQ.Integra_08_setUp.EMI_UK;
    SHARE  := _F_INTGR_REE_AQ.Integra_08_setUp.SHARE;
    NRD_ID := _F_INTGR_REE_AQ.Integra_08_setUp.NRD_ID;
    // -----------------------------------------------------------------------------
    // Открыть лицевой счет 1-го владельца - физического лица
    OWNER_ID      := _QA->InsFaceByAlias_t('IndvRusRez-01', Date(OwnCreateMoment), __tFace_OWNER);  
    CLIENT_ID     := _QA->InsClientByAlias_t('OW-01',  Date(OwnCreateMoment), OWNER_ID, ISSUER, null, __tClient_OwnerAcc);
    
    // -----------------------------------------------------------------------------
    // Открыть лицевой счет 2-го владельца - физического лица
    OWNER_ID2     := _QA->InsFaceByAlias_t('IndvRusRez-02', Date(OwnCreateMoment), __tFace_OWNER2);  
    CLIENT_ID2    := _QA->InsClientByAlias_t('OW-01',  Date(OwnCreateMoment), OWNER_ID2, ISSUER, null, __tClient_OwnerAcc2);

    // -----------------------------------------------------------------------------
    // Открыть лицевой счет 3-го владельца - физического лица
    OWNERF_ID3    := _QA->InsFaceByAlias_t('JurFrgnFFINBrokerage', Date(OwnCreateMoment), __tFace_OWNER3);  
    CLIENT_ID3    := _QA->InsClientByAlias_t('OW-01',  Date(OwnCreateMoment), OWNERF_ID3, ISSUER, null, __tClient_OwnerAcc3);

    // Открыть лицевой счет номинальщика (НРД). Нужен счет с заданным номером, поэтому собираем вручную
    _QA->ProduceClientR_CD_t(__tClient_NominiAcc, OwnCreateMoment);
    %ProfileClient_t.@EDIT;
    %ProfileClient_t._FACE   := NRD_ID;
    %ProfileClient_t._ISSUER := ISSUER;
    %ProfileClient_t._F_DATE := OwnCreateMoment;
    %ProfileClient_t._NUMBER := 'H00004216';
    %ProfileClient_t.@POST;
    
    try
        CLIENT_ID := _QA->InsClient_t(%ProfileClient_t);
    except    
        propagate;
    end;
        
    // -----------------------------------------------------------------------------
    // Выдать паи владельцу на лицевой счет CLIENT_ID 
    SE1 := _QA->IssueEtf(DateTime(issueMoment), EMI_UK, CLIENT_ID, SHARE, Rest_Own, '');
    
    // -----------------------------------------------------------------------------
    // Выдать паи владельцу на лицевой счет NCLIENT_ID
    SE2 := _QA->IssueEtf(DateTime(issueMoment), EMI_UK, CLIENT_ID2, SHARE, Rest_Own2, '');

    // -----------------------------------------------------------------------------
    // Выдать паи владельцу на лицевой счет CLIENT_ID2
    SE3 := _QA->IssueEtf(DateTime(issueMoment), EMI_UK, NCLIENT_ID, SHARE, Rest_Own3, '');

    // -----------------------------------------------------------------------------
    // Выдать паи владельцу на лицевой счет CLIENT_ID3
    SE3 := _QA->IssueEtf(DateTime(issueMoment), EMI_UK, CLIENT_ID3, SHARE, Rest_Own4, '');

except
    ListAdd(LOGK, 'QA-System: В тесте '+QA_CODE + ' не получилось создать окружение. Exception [' + Exception.text + ']');
    result := _QA.CANCELED;
    tEnd   := now;
end;


// --------------------------------------------------------------------------------
// ------  Выполнение тестового сценария
try
    // Тестируемая функция
    //$xxxxxxxxxxxx(SELF, ......);
    dummy
except
      //raise('QA-System: Тест '+QA_CODE + ' закончился падением');
      ListAdd(LOGK, 'QA-System: Тест '+QA_CODE + ' закончился падением')
end;

// if (f_date = Dt_et) then
//     ListAdd(LOGK, '   B_DATE  = B_DATE_et')
// else
//     ListAdd(LOGK, ' * B_DATE  != B_DATE_et {' + str(f_date)+ ' | ' + str(Dt4_et) + ' }');
//     inc(err_c);
// end;

// --------------------------------------------------------------------------------
// Post-condition : Удаляем окружение
if _F_INTGR_REE_AQ.EnvDestroy = 1 then
    if ~isBlank(CLIENT_ID) then
       ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], CLIENT_ID);
       ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], CLIENT_ID);
    end;
    if ~isBlank(OWNER_ID ) then
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], OWNER_ID );
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], OWNER_ID );
    end;

    if ~isBlank(CLIENT_ID2) then
       ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], CLIENT_ID2);
       ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], CLIENT_ID2);
    end;
    if ~isBlank(OWNER_ID2 ) then
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], OWNER_ID2 );
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], OWNER_ID2 );
    end;
    
    if ~isBlank(CLIENT_ID3) then
       ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], CLIENT_ID3);
       ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], CLIENT_ID3);
    end;
    if ~isBlank(OWNERF_ID3 ) then
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], OWNERF_ID3 );
        ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], OWNERF_ID3 );
    end;
    
end;

// -------------------------------------- Оформляем результат --------------------------------------------------------------
// try
//     _QA->ResultRegistration(%tt, QA_CODE, result, logK, tStart, Now);
// except
//     raise('QA-System: Тест '+QA_CODE + ' не получилось исполнить.');
// end;
// %tt._result;