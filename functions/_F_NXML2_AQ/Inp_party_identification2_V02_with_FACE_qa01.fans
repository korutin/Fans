// Inp_party_identification2_V02_with_FACE_qa01(%tt: int):int
// --------------------------------------------------------------------------------------
// UNIT тестовая функция для проверки работы мета-функции _F_NXML2->Inp_party_identification2_V02_with_FACE
// Возвращаемое значение 0 - passed   (тест прошел)
//                       1 - fail     (тест не прошел)
//                       2 - broken   (тест вызвал исключение)
//                       3 - canceled (тест упал при создание предусловия/окружения)
// Выходные параметры:
//           tt -  таблица T:=Table(scenario str, result int, log List)  с одной записью
//                                      scenario : символьный код тестового сценария в системе тестирования
//                                      Result   : 0 - passed (тест прошел); 1 - fail (тест не прошел); 2 - broken (тест вызвал исключение); 3 - canceled (тест упал при создание предусловия/окружения)
//                                      tStart   : дата/время запуска теста
//                                      tEnd     : дата/время окончания/падения теста
//                                      log      : список строк с ошибками

uses _QA, _F_NXML2;

var Info, err_c, Dt1, tStart, result, tEnd, ErrList, Codes;
var CrMomentUK, OGRN_et, CODE_et, NAME_et, FACE_et, id_2,
    NAME, FACE;
var xml, x_id_2;
var logK;
var QA_CODE := 'Inp_party_identification2_V02_with_FACE_qa01', F_ID, SELF_ID;

// $meta begin
var __tFace_UK := Table( B_DATE date, E_DATE date, NAME str, INN str, S_TYPE int, MAIL_ADR str, HOME_ADR str, FACT_ADR str, MAIL_KLADR str, HOME_KLADR str, FACT_KLADR str, MNEM str,
                         EMAIL str, FAX str, TELEX str, KPP str, PHONE str, STATE int, DATE_BIRTH date, DATE_DEPTH date, REGN int, BRANCHES int, IS_NERES int,
                         DOC_TYPE int, DOC_DAT date, DOC_END date, DOC_CODE str, DOC_SER str, DOC_NUM str, DOC_PLACE str, IMAGEFILE str, ENG_NAME str, ENG_MAIL_ADR str, SEX str,
                         PHONE_WORK str, PENSNUM str, BIRTHPLACE str, PUBMODE int, FULL_NAME str, ENG_FULL_NAME str, OKPO str, OKONX str, OPF str, FS int, DEPOT int, REESTR int,
                         CAPITAL float, EXEC_ORGAN int, NAL_ORGAN int, OGRN_DATE date, OGRN_PLACE str, OGRN str, OKOGU str, OKATO str, DOL_1 str, DOL_2 str, FIO_1 str, FIO_2 str, TEL_1 str, TEL_2 str, OSN_1 str,
                         OSN_2 str, TEL_OTV str, TEL_BUG str, DOL_OTV str, FIO_OTV str, FIO_BUG str,
                               __tDModes_DIAL_MODES Table(NUM_LIC str, BEG_LIC date, END_LIC date, MODE int, PLACE_LIC str),
                               __tCode_CODES Table(CODER int, CODE str, FACE int), 
                               __tOMETA Table(ID int, CLASS str));

var __tClient_CC :=Table( BAL_ACC int, ID int, NUMBER str, TYPE_ int, SUBTYPE int, FACE int, RELATION int, PARENT int, PLAN_ID int, IS_TERM str, IS_MANAGER int, IS_VOICE int, IS_PRIV int, 
                          IS_SOV int, IS_NZ int, IS_BCLIENT int, STATE int, D_OPEN date, D_CLOSE date, Z_DATE date, F_DATE date, OPER int, NAME str, LINK_NUMBER str, 
                          INCOME_MOD int, INCOME_ACC int, INCOME_ADR str, INCOME_REC str, INCOME_FACE int, O_MAIL_MOD int, O_MAIL_ADR str, I_MAIL_MOD int, I_MAIL_ADR str, DD_DATE date, DD_NUM str, 
                          PLACE int, ISSUER int, TARIF str, TRANSIT int, EXTRA_INT int, EXTRA_TYPE int, CLI_ORG int, USER_CODE str,
                               __tAFFILS Table(RELATION int, FACE int, B_DATE date, A_END date, PERCENT_ int, INCOME_ACC int, INCOME_FACE int, INCOME_REC str),
                               __tOMETA Table(ID int, CLASS str));

// $meta end

// ------------------------------------   Pre-Condition    ----------------------------------------------------------------
TableClear(%tt);
result   := _QA.PASSED;
tStart   := now;
Codes    := List();
Info     := '';

CrMomentUK := date('01.10.2020 09:00:05');
CODE_et    := 'MC0009200000';

try    
    FACE_et := _QA->InsFaceByAlias_t('JurRusOlmaUK', CrMomentUK, __tFace_UK);
    OGRN_et := __tFace_UK._OGRN;
    NAME_et := __tFace_UK._NAME;
    // Создание окружения    
    x_id_2 := Table(id str, id_type str, narrative str);
    TableInsert(x_id_2, List('id='+OGRN_et, 'id_type=OGRN', 'narrative='));
    TableInsert(x_id_2, List('id='+CODE_et, 'id_type=OTHR', 'narrative=NSDR'));
    
    xml := Table(id_2 int, name str, postal_address str, party_contacts str);
    xml.@APPEND;
    xml._id_2 := x_id_2;
    xml._name   := NAME_et;
    xml.@POST;
except
    ListAdd(LOGK, 'QA-System: В тесте '+QA_CODE + ' не получилось создать окружение. Exception [' + Exception.text + ']');
    result := _QA.CANCELED;
    tEnd   := now;
end;

// --------------------------------------------------------------------------------
// ------  Выполнение тестового сценария и проверка результата
if (result <> _QA.CANCELED) then
    try
        // Тестируемая функция
        _F_NXML2->Inp_party_identification2_V02_with_FACE(xml, '', Codes, NAME, FACE, Info);
        err_c  := 0;
        _QA.eq_ff.L := ''; //LOGK;
        err_c  := err_c + _QA->eq_ff( FACE, FACE_et, 'Inp_party_identification2_V02_with_FACE.FACE', 'FACE_et', LOGK);
        result := iif(err_c>0, _QA.FAIL, _QA.PASSED);
    except
        ListAdd(LOGK, 'QA-System: Тест '+QA_CODE + ' закончился падением. Exception [' + Exception.text + ']');
        result := _QA.BROKEN;
    end;
end;

// -------------------------------------- Post-condition : Удаляем окружение ----------------------------------------------
if _F_NXML2_AQ.EnvDestroy = 1 then    
    try
        //_QA->DelContext2(ErrList);
        dummy;
    except
        ErrList := ErrList + #13+#10+'Исключение во время удаление окружения.' + Exception.Text;
    end;
    if ~isBlank( ErrList ) then
        ListAdd(LOGK, 'QA-System: Тест '+QA_CODE + '.' + ErrList);
    end;

    // ExecSQL('Данные', [update OD_CLIENTS set STATE = 2 where ID = :ID], EMI_UK);
    // ExecSQL('Данные', [delete from OD_CLIENTS where ID = :ID], EMI_UK);
    ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID and SELF_ID<>ID], FACE_et );
    ExecSQL('Данные', [delete from OD_FACES where SELF_ID = :SELF_ID], FACE_et );    
end;

// -------------------------------------- Оформляем результат --------------------------------------------------------------
try
    //TableClear(%tt);
    %tt.@APPEND;
    %tt._scenario := QA_CODE;
    %tt._result   := result;
    %tt._log      := logK;
    %tt._tStart   := tStart;
    %tt._tEnd     := now;
    %tt.@POST;
except
    raise('QA-System: Тест '+QA_CODE + ' не получилось исполнить.');
end;
%tt._result;
