// Parse_INSTRUCTION_TO_DEPO_TRANSFER(%DOC_ID:int; %Mute, %PPNum:str; %PPData:datetime; %PCode, %POutNum:str; %B, ErrList)
// ------------------------------------------------------------------------------------------------------------------------
//
// ** R03-1 **
// _F_IXML150
// Функция разбора типа INSTRUCTION_TO_DEPO_TRANSFER из форматов Инфининтума 1-5-0
// В каталоге MACROS должен присутствовать файл со схемой. Имя фиксированное specdep_xml_1_5_0.xsd
// Чтобы проверка на соответствие схеме включалась должна быть подожжена галочка "Контроль XML корректности структуры сообщений" на форме "Системные настройки"
// Создает карточку операции 'Поручение на зачисление (прием поставки) из внешнего депозитария' или 
//                           'Поручение на зачисление (депонирование) из реестра'
// %DOC_ID - идентификатор документа категории "Входящее сообщение", содержащий XML текст для разбора, если %DOC_ID пустой, то ожидается что XML текст передается
//           черезе %B
// EKS 03.2019

var SenderDocNum, SenderDocDate, BErrList;
// Всяческие рабочие/временные переменные
var x_main, body;
var DebugLog, ErrTag, Gdoc, PNum, PData, ID, D_CAT, direction, cc, r_doc, f_doc, ErrStr, rez, DD1, DD2, D_ID, status, err, i, fSTATE;

var COMMENT, RUBRICA, CREATOR,
    doc_state:= 1, //Extract('Данные', [select ID from OD_DOC_STATES where SYS_NAME='START']), //BEGIN_XML
    WHOS := _Sys_Setings_F.OD_SETS._WHOS;
var PhantomDoc := Table( SYS_NAME str, NUM str, CONTR_DATE date, CLIENT int, CAGENT int, PARTY_TYPE int, FROM_FACE int, RELATION int);
var LoLog   := Table (Rekviz str, tags_descr str, tags str, critic int, Info Str, type str);
var AccPlan := Extract('Данные', [select ID from OD_ACC_PLANS where WHOS=:WH and SYS_NAME='DEPO_BANK'], MyFace);
// ===== Реквизиты поручения ======

var SYS_NAME  := '',
    OPE_TYPE := clear(0),
    PARAM     := '',
    PASS_KIND := 8,
    D_DATE    := date('31.12.1899'),
    NUM       := clear(''),
    CLIENT    := clear(0),
    FROM_FACE := -1,
    SHARE     := clear(0),
    K_RDIV    := '', 
    K_RCODE   := '', 
    K_RACC    := '', 
    SETTLEMENT_PLACE:='',
    K_TYPE    := clear(0),
    LINE      := '',
    MARKET    := null,
    AMOUNT    := null,
    G_TEXT    := List(),
    G_CLASS   := null,
    G_NUM     := null, 
    G_DATE    := date('31.12.1899'),
    G_VAL     := null,
    G_SUM     := null,
    IS_K      := null,
    K_NAME    := null,
    K_STATE   := null, 
    KK_TYPE   := null, 
    KK_SER    := null,
    KK_NUM    := null,
    KK_DAT    := null, 
    KK_PLACE  := null,
    IS_G      := null,
    G_RACC    := null,
    G_TYPE    := null,    
    G_CONTRA  := null,
    KD_STATE  := null,
    KD_TYPE   := null,
    KD_SER    := null,
    KD_NUM    := null,
    KD_DAT    := null,
    KD_PLACE  := null,    
    IS_BLOCK  := null,
    S_DATE    := null,
    M_DATE    := null,
    NRD_REF   := clear(''),
    KKK_RACC  := null,
    NARRATIVE := null,
    D1_NUM    := null,
    D1_DATE   := null,
    CONTRAGENT:= clear(0);

//raise('Упс! Исключение!');

DebugLog  := List();
ErrList   := List();
Gdoc      := 0;
direction := 0;       //Направление создаваемго документа-поручения (Входящий, Исходящий, Внутрениий)
fSTATE    := 2;       // Состояние по умолчанию в котором создается ЗЖРД

// ---------------- Проверяем наличие Входящего ЗЖРД к Входящему сообщению %DOC_ID -----------------
for 'Данные' select [
    select f.DOC
       from OD_STEPS s
              left join D_FILER f on f.DOC = s.A_DOC 
    where s.DOC=:DOC  and s.S_TYPE=0 and s.ERR_CODE=2004/*входящий образ*/   --d.WHOS=11286 
             and f.DOC is not null ]
from %DOC_ID
into f_doc
do
    _F_DOC->Link_Del(%DOC_ID, f_doc, 2004);
    // - Если решим что привязанный образ надо удалять - то раскоментировать строку ниже
    ExecSQL('Данные', [delete from OD_DOCS where ID = :doc], f_doc);
end;
// -------------------------------------------------------------------------------------------------
iif (%mute, dummy,
   StartProgress('Распаковка документа',
                   List('Проверка XML файла по схеме',  // 0 
                        'Разбор XML - файла',           // 1
                        'Создание нового документа'))); // 2

iif(%mute, dummy, DoProgress(0, 0, 1));

if (~isNull(%doc_id)) then
    body   := Extract( 'Данные', 'select BODY from D_IN_MESS where DOC=:D', %doc_id);
else
    body   := %B;
end;
// ---------------- Проверка структуры XML документа на соответствие XSD схеме -----------------
if (_Sys_Setings_F.OD_SETS._SAVE_MODE = 1) then 
   if (_F_IXML150->Check_xml_content( body, 'specdep_xml_1_5_0', %mute, ErrList)<>1) then
      if %mute then  
          return(100)
      else
          raise(ErrList);
      end;          
   end;
end;
// ---------------------------------------------------------------------------------------------

iif(%mute, dummy, DoProgress(0, 1, 1));
iif(%mute, dummy, DoProgress(1, 0, 1));

// -------------------------
ErrTag := 0;
// -------------------------
//var x:=_Metal_F->XML_Open(%B,'I_WRITE_OFF_ed');
x_main := _Metal_F->XML_Open(body, '');
ID     := Gen_ID('Данные', 'OD_DOCS_ID_GEN' , 1);

SelectSQL('Данные', [select NUM, NAME from OD_USR_TABS where CODE='RUBRICATOR' and DOP=:N], %PCode, RUBRICA, COMMENT,exit); //пытаемся найти рубрику по наименованию поручения
SelectSQL('Данные', [select ID from OD_OPERATORS where f_Left(f_Upper(USER_DOL),9)='CODE=AVTO'], CREATOR, exit);            //хотят опеарциониста с таким вот признаком

try
    // Разбираем шапку
    //   PNum  = \header\doc_num
    //   PData = \header\doc_date\date
    _F_IXML150->Inp_out_doc(x_main, PNum, PData);    

    // Разбираем всё остальное
    // --------------------------------------- Вычисляем реквизиты, ровно в таком виде как описано в ТЗ -------------------------------------
    _F_IXML150->Parse_R03_1_2_Content(x_main, 'INSTRUCTION_TO_DEPO_TRANSFER', %mute, direction, LoLog, SYS_NAME, PARAM, PASS_KIND , D_DATE, NUM, CLIENT, FROM_FACE, SHARE, K_RDIV, K_RCODE, K_RACC, SETTLEMENT_PLACE, K_TYPE, LINE, MARKET, AMOUNT, G_TEXT,
        G_CLASS, G_NUM, G_DATE, G_VAL, G_SUM, IS_K, K_NAME, K_STATE, KK_TYPE, KK_SER, KK_NUM, KK_DAT, KK_PLACE, IS_G, G_RACC, G_TYPE, G_CONTRA, KD_STATE, KD_TYPE, KD_SER, KD_NUM,
        KD_DAT, KD_PLACE, IS_BLOCK, S_DATE, M_DATE, NRD_REF, KKK_RACC, NARRATIVE, D1_NUM, D1_DATE, OPE_TYPE, CONTRAGENT, DebugLog);
    _Metal_F->XML_Close;
    // --------------------------    
except
    //ErrList := ErrList + '----------------' + #13 + #10 +
    //           'Непредвиденная ошибка при обработке документа: '+Exception.Text;
    //--------------------------
    // Будет регистрация входящего ЗЖРД с минимальными данными. входящая ЗЖРД привязана к Входящему сообщению.
    TableInsert(LoLog, List('rekviz=','tags_descr=' ,'tags=', 'critic=2','Info=Непредвиденная ошибка при разборе XML содержимого документа № ' + str(%PPnum) + ' от ' + str(%PPData) + ':' + replace(Exception.Text,#13+#10, ' ')));  
    //ErrTag := 3; 
    // --------------------------
    _Metal_F->XML_Close;
end;

iif(%mute, dummy, DoProgress(1, 1, 1));
iif(%mute, dummy, DoProgress(2, 0, 1));

// Создание нового документа 
D_CAT  := Extract('Данные', "select ID from OD_DOC_CATS where SYS_NAME='"+SYS_NAME+"'");

// ---------------------------------------------------------------------------------------------
// Проверка был ли ранее в этот опер.день обработан документ по такому же счету депо (CLIENT) 
// с такими же номерами
cc  := 0;
rez := 0;
DD1 :=clear(0); DD2:=clear(0); ErrStr := '';
if (~isBlank(CLIENT)) then
    // Проверка было ли в прошлом обработано поручение с таким же doc_num, doc_date, CLIENT с порождением экземпляра депозитарного поручения
    cc := Extract('Данные', [select count(i.doc)
                             from OD_IN_DOCS i
                                 left join OD_DOCS di on di.KVIT = i.DOC
                                 left join D_CLISER_ZA_SP z on z.DOC = di.ID
                             where z.CLIENT = :DEPO and f_copy(Upper(i.THEIR_NUM), 1, f_RightPos('_', Upper(i.THEIR_NUM))-1) = :PNum and f_date(i.THEIR_DATE) = :PDate], 
                        CLIENT, UpperCase(PNum), PData);
    if (cc = 0) then
        // Проверка было ли в прошлом обработано поручение с таким же doc_num, doc_date, CLIENT без порождением экземпляра депозитарного поручения.
        // В этом случае след должен оставить ЗЖРД в котором прописаны doc_num, doc_date, CLIENT
        cc := Extract('Данные', [select count(i.doc) as FIELD_0 
                                 from OD_IN_DOCS i
	                                 left join OD_STEPS st1 on st1.DOC = i.DOC and st1.S_TYPE = 0 and st1.ERR_CODE = 2004
	                                 left join D_FILER f on f.DOC = st1.A_DOC 
                                 where (f.ACCOUNT = :DEPO)
                                         and f_copy(Upper(i.THEIR_NUM), 1, f_RightPos('_', Upper(i.THEIR_NUM))-1) = :PNum 
                                         and f_date(i.THEIR_DATE) = :PDate], 
                        CLIENT, UpperCase(PNum), PData);
    end;
                        
    if (cc>0) then
       TableInsert(LoLog, List('rekviz=', 'tags_descr=' ,'tags=', 'critic=2','Info=В текущем операционном дне уже обрабатывался документ по счету депо '+_F_DEPO->GetClient(CLIENT) + ' с номером ' + str(Pnum)));
    end;
    if (FROM_FACE >= 0) then
        TableInsert(PhantomDoc, List('SYS_NAME='+SYS_NAME,
                                 'NUM=' + NUM,
                                 'CONTR_DATE='+str(date(D_DATE)),
                                 'CLIENT='+str(CLIENT),
                                 'PARTY_TYPE=',
                                 'FROM_FACE='+FROM_FACE,
                                 'RELATION='
                ));
        rez := _F_IXML150->Check_Affils(PhantomDoc, ErrStr, DD1, DD2);
        if rez <> 0 then
            // Выбранный инициатор не имеет полномочий для действия / тут бы вернуть -24
            TableInsert(LoLog, List('rekviz=', 'tags_descr=' ,'tags=', 'critic=2','Info=При распаковке вх.сообщения поручения № ' + str(%PPnum) + ' от ' + str(%PPData) + ' по счету депо '+ _F_DEPO->GetClient(CLIENT)+' не определены полномочия инициатора поручения: ' + ErrStr));
        end;           
    end;   
end;
// ---------------------------------------------------------------------------------------------
//В лог.файл и в общее сообщение обо всех ошибка по ЕМАЙЛ , заноситься информация о том:
//«при распаковке вх.сообщения поручения № от дата не определен обязательный реквизит формы поручения: «Имя реквизита»,  по информации из вх.документа: «значение тэга:<…>»

// Готовим ErrList из лог-таблицы
_F_IXML150.GenErrList.Info := List();
ErrTag := _F_IXML150->GenErrList(LoLog, PNum, PData);
ErrList := ErrList + _F_IXML150.GenErrList.Info;

// ---------------------------------------------------------------------------------------------

iif(%mute, dummy, DoProgress(2, 1, 1));

// ---------------- Обновим поле 'От кого' у Входящего сообщения ----------
if FROM_FACE >= 0 and ~isNull(%doc_id) then
  ExecSQL('Данные',[UPDATE OD_IN_DOCS set FROM_FACE=:FACE_FROM, THEIR_DATE=:D_DATE where DOC=:DOC], FROM_FACE, PData, %doc_id);
end;
// ------------------------------------------------------------------------------------------------------

status := '';
err    := 0;
D_ID   := ID;
if ErrTag=0 or ErrTag=1 then
    // Либо нет ошибок, либо были не критические ошибки
    status :='01';    
    MainForm.UserDic.@commit; //Закрываем предыдущую транзакцию
    MainForm.UserDic.@start;
    try
        i := 0;
        while i<21 do
            NUM := _f_doc->NextDocumentNum( SYS_NAME, D_DATE, DIRECTION );
            try
                ExecSQL('Данные', [insert into OD_DOCS(ID, NUM, PARAM, D_CAT, D_DATE, STATE, DIRECTION, WHOS, KVIT)
                                   values(:ID, :NUM, :PARAM, :D_CAT, :D_DATE, :STATE, :DIRECTION, :WHOS, :KVIT)],
                                           ID, NUM, PARAM, D_CAT, D_DATE, doc_state{STATE}, direction, WHOS, %DOC_ID);
                 exit;
            except
                if pos( 'Дублирование номера', Exception.text )>0 and i<19 then
                    inc(i);
                    ErrList := ErrList + 'Продублировался номер '+ str(NUM)+'. Попытка '+str(i)+'. Время '+str(now) + #13 +#10;
                else 
                    propagate;
                end;
            end;            
        end;
        ExecSQL('Данные', [insert into D_CLISER_ZA_SP(
                                   DOC,     OPE_TYPE, SHARE,    AMOUNT,   G_CLASS,  G_NUM,   G_DATE,  G_TEXT,   G_SUM,            G_VAL,    G_CONTRA,  M_DATE,   CLIENT, LINE, 
                                   K_TYPE,  K_NAME,   K_RACC,   K_RDIV,   K_RCODE,  KD_TYPE, KD_SER,  KD_NUM,   KD_DAT,           KD_PLACE, S_DATE,    IS_BLOCK, MARKET,
                                   NRD_REF, K_STATE,  KD_STATE, KK_TYPE,  KK_SER,   KK_NUM,  KK_DAT,  KK_PLACE, SETTLEMENT_PLACE, G_RACC,   G_TYPE,    IS_K,     IS_G,   NARRATIVE, D1_NUM, D1_DATE,
                                   CONTRAGENT)
                           values(:DOC,    :OPE_TYPE,:SHARE,   :AMOUNT,  :G_CLASS, :G_NUM,  :G_DATE, :G_TEXT,  :G_SUM,           :G_VAL,   :G_CONTRA, :M_DATE,  :CLIENT,:LINE,
                                  :K_TYPE, :K_NAME,  :K_RACC,  :K_RDIV,  :K_RCODE, :KD_TYPE,:KD_SER, :KD_NUM,  :KD_DAT,          :KD_PLACE,:S_DATE,   :IS_BLOCK,:MARKET,
                                  :NRD_REF,:K_STATE, :KD_STATE,:KK_TYPE, :KK_SER,  :KK_NUM, :KK_DAT, :KK_PLACE,:SETTLEMENT_PLACE,:G_RACC,  :G_TYPE,   :IS_K,    :IS_G,:NARRATIVE, :D1_NUM, :D1_DATE,
                                  :CONTRAGENT)],
                                   ID,      OPE_TYPE, SHARE,    AMOUNT,   G_CLASS,  G_NUM,   G_DATE,  G_TEXT,   G_SUM,            G_VAL,    G_CONTRA,  M_DATE,   CLIENT, LINE, 
                                   K_TYPE,  K_NAME,   K_RACC,   K_RDIV,   K_RCODE,  KD_TYPE, KD_SER,  KD_NUM,   KD_DAT,           KD_PLACE, S_DATE,    IS_BLOCK, MARKET,
                                   NRD_REF, K_STATE,  KD_STATE, KK_TYPE,  KK_SER,   KK_NUM,  KK_DAT,  KK_PLACE, SETTLEMENT_PLACE, G_RACC,   G_TYPE,    IS_K,     IS_G, NARRATIVE,  D1_NUM, D1_DATE,
                                   CONTRAGENT);
                                   
        ExecSQL('Данные', [insert into OD_IN_DOCS (DOC,FROM_FACE,PASS_KIND) values(:DOC, :FROM_FACE, :PASS_KIND)],
                                                   ID, FROM_FACE, PASS_KIND);
        _f_doc->Link_Add(ID, %DOC_ID, 2006); // к входящему сообщению от порождённого им документа
        ExecSQL('Данные', [update OD_DOCS set STATE=:ds, id=0 where ID=:gid], doc_state, ID);  //=============================================
        if ErrTag = 0 then
            err := 0;
        else    
            if not %Mute then
                Warning('При разборе xml поручения сформирован список ошибок/предупреждений.'+#13+#10+#13+#10+ErrList);
            end;
            err := -1;
        end;
        MainForm.UserDic.@commit;  //Открываем транзакцию для следующего отчёта
        MainForm.UserDic.@start;   //Открываем транзакцию для следующего отчёта
        
        //Report('x_T_REP');
    except
        MainForm.UserDic.@rollback;
        //--------------------------
        // регистрация входящего документа
        MainForm.UserDic.@start;
        ErrList := _f_report->Add_Info(ErrList, 'Ошибка при вставке и регистрации документа-поручения: '+Exception.Text);
        D_ID    := %DOC_ID;
        fSTATE  := 0;
        err     := 100; 
        if not %Mute then
          Warning('При вставке документов произошла непредвиденная ошибка. Сформирован список ошибок/предупреждений.'+#13+#10+#13+#10+ErrList);
        end;
        //return(err); //return(107) // Ошибка в обработке документа в связи с отказом пользователя от выполнения        
    end; 
    //-------------------------------
else //ErrTag=2 и ErrTag = 3
    //MainForm.UserDic.@commit; //Закрываем предыдущую транзакцию
    //MainForm.UserDic.@start;
    err    := 100;
    D_ID   := %DOC_ID;
    fSTATE := 0;
    // --------------------------
    if not %Mute then
        Warning('При разборе xml поручения сформирован список ошибок/предупреждений.'+#13+#10+#13+#10+ErrList);
    end;
    status:='03';
    //NUM:='#';
    //D_DATE:=str(now());
    //Report('x_T_REP');
    //return(err)
end;

try
    //--------------------------
    // регистрация входящего документа
    if MyBase='SDP' then
        //SDP_InDocFiler_Add(%DOC:int; %CONTRACT:int; %FUND:int; %CORR_FACE:int; %DOC_NUM:str; %DOC_DATE:datetime; %NUM:str; %D_DATE:datetime; %COMMENT, %MESS, %FILE_NAME, %CORR_NUM :str; %CORR_DATE:datetime;
        // %PLACE:int; %ACCOUNT:int; %PASS_KIND:int; %RUBRICA :int; %CREATOR :int;%MUTE:int) 
        _f_ixml150.SDP_InDocFiler_Add.STATE := fSTATE; 
        _f_ixml150->SDP_InDocFiler_Add(D_ID, clear(0), clear(0), iif(FROM_FACE>=0,FROM_FACE, clear(0)), PNum, PData, %PPNum, %PPData, COMMENT, body, '', '' {%POutNum}, clear(now),
                Clear(0), CLIENT, 8, RUBRICA, CREATOR, %Mute);
    else
        // InDocFiler_Add(%DOC:int; %CONTRACT:int; %FUND:int; %CORR_FACE:int; %DOC_NUM:str; %DOC_DATE:datetime; %NUM:str; %D_DATE:datetime; %COMMENT, %MESS, %FILE_NAME, %CORR_NUM :str; %CORR_DATE:datetime) :int
        _F_DOC.InDocFiler_Add.PASS_KIND:= PASS_KIND; //ЭДО
        _F_DOC.InDocFiler_Add.RUBRICA  := RUBRICA;
        _F_DOC.InDocFiler_Add.CREATOR  := CREATOR;
        _F_DOC.InDocFiler_Add.ACCOUNT  := CLIENT;
        _F_DOC.InDocFiler_Add.MUTE     := %Mute;
        _F_DOC->InDocFiler_Add(D_ID, clear(0), clear(0), iif(FROM_FACE>=0,FROM_FACE, clear(0)), PNum, PData, %PPNum, %PPData, COMMENT, body, '', ''{%POutNum}, clear(now));
    end;
    MainForm.UserDic.@commit;  // Фиксируеме транасакцию
    MainForm.UserDic.@start;
    // --------------------------
    status:='03';
    //NUM:='#';
    //D_DATE:=str(now());
    //Report('x_T_REP');
except
    MainForm.UserDic.@rollback;
    MainForm.UserDic.@start;
    ErrList := _f_report->Add_Info(ErrList, 'Ошибка при вставке Записи в журнале регистрации документов: '+Exception.Text);
    if not %Mute then
        Warning('Ошибка при вставке Записи в журнале регистрации документов:' + #13 + #10 + Exception.Text);
    end;
    err     := 100; 
end;

err;