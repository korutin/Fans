// InsFaceByAlias_t(%Alias, %StDate:date; %Profile_t:int):int
// -----------------------------------------
// Вставка в БД лица представленного во входящем DataSet - %Profile_t
// В 
// EKS 01.2020

// Хочешь узнать структуру таблицы %Profile_t вызови _QA->_GenRequizFace и в _QA._L2 получишь список полей с типами

var dt, FACE_ID, FIELDS;

FACE_ID  := clear(0);
FIELDS   := List();
TableClear(%Profile_t);

if (isBlank(%StDate)) then
    Dt := Date(Now)
else
    Dt := %StDate
end;    

//    if (_QA.ins_or_load = 0 ) then
//        FACE_ID :=_QA->InsFace_t(%Profile_t)
//    else
//        FACE_ID :=_QA->InsOrLoadFaceByAlias_t(%Profile_t);
//    end;
if TableFind(_QA.Generators, List('Alias='+UpperCase(%Alias))) then
    Eval('', [_QA->]+_QA.Generators._code+[(%Profile_t, Dt);]);
    try
        FACE_ID :=_QA->InsFace_t(%Profile_t);
    except
        raise([{ "placeType" : "Функция",
                 "placeName" : "_QA->InsFaceByAlias_t",
                  "mess"     : "Ошибка при вставке субъекта с кодом/тикером ]+ str(%Alias)+ [. Детали:]+Exception.text+["}]);
        //propagate;
    end;
else
    raise([{ "placeType" : "Функция",
             "placeName" : "_QA->InsFaceByAlias_t",
              "mess"     : "В библиотеке нет шаблона субъекта с именем ]+ str(%Alias)+ ["}]);   
end;

//    if (trim(lowercase(%Alias)) = lowercase('JurRusLtdUK-01')) then      _QA->ProduceFace_JurRusEnergocap_HistDpt3_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusLtdUK-02')) then      _QA->ProduceFace_JurRusEnergocap_HistDpt5_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusLtdUK-03')) then      _QA->ProduceFace_JurRusUK_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusUK-Pablo')) then      _QA->ProduceFace_JurRusUK_Pablo_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusLtd-01')) then        _QA->ProduceFace_JurRusVainstein_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusVainstein_ext')) then _QA->ProduceFace_JurRusVainstein_ext_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusLukoilA-03')) then    _QA->ProduceFace_JurRusLukoila_HistDpt3_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusLtdFin-04')) then     _QA->ProduceFace_JurRusAZHIO_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('IndvRusRez-01')) then       _QA->ProduceFace_IndvRus01_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('IndvFrgnNeRez-01')) then    _QA->ProduceFace_IndvFrgn01_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('IndvFrgnNeRez-02')) then    _QA->ProduceFace_IndvFrgn02_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('nkc-a')) then               _QA->ProduceFace_JurRusClearingOrgA_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('ndc-a')) then               _QA->ProduceFace_JurRusCentrDepA_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusETFIssuerA')) then    _QA->ProduceFace_JurRusETFIssuerA_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusETFIssuerB')) then    _QA->ProduceFace_JurRusETFIssuerB_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusETFIssuerC')) then    _QA->ProduceFace_JurRusETFIssuerC_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusETFIssuerD')) then    _QA->ProduceFace_JurRusETFIssuerD_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusGreenBank-01')) then  _QA->ProduceFace_JurRusSber_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusReg-01')) then        _QA->ProduceFace_JurRusRegistrator_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusOlmaUK')) then        _QA->ProduceFace_JurRusOlmaUK_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusSarAeroEmit')) then   _QA->ProduceFace_JurRusSarAeroEmit_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusBrokOpen_HistDpt2')) then   _QA->ProduceFace_JurRusBrokOpen_HistDpt2_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusBrokFirst')) then  _QA->ProduceFace_JurRusBrokFirst_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusVainstein')) then  _QA->ProduceFace_JurRusVainstein_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusRosFosNitroEmit')) then  _QA->ProduceFace_JurRusRosFosNitroEmit_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusDutySpecDep')) then  _QA->ProduceFace_JurRusDutySpecDep_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurRusDutyUK')) then  _QA->ProduceFace_JurRusDutyUK_t(%Profile_t, Dt);
// elsif (trim(lowercase(%Alias)) = lowercase('JurFrgnDUTrustOne')) then  _QA->ProduceFace_JurFrgnDUTrustOne_t(%Profile_t, Dt);
// //elsif (trim(lowercase(%Alias)) = lowercase('NRD')) then _QA->ProduceFace_NRD_t(%Profile_t, Dt)
// else
//     raise([{ "placeType" : "Функция",
//              "placeName" : "_QA->InsFaceByAlias_t",
//               "mess"     : "В библиотеке нет шаблона субъекта с именем ]+ str(%Alias)+ ["}]);
// end;
FACE_ID;