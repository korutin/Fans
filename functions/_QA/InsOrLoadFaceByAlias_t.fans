// InsOrLoadFaceByAlias_t(%Alias, %StDate:date; %Profile_t:int):int
// -----------------------------------------
// Вставка в БД лица по его алиасу %Alias, любое лицо обращающееся в рамках тестовых активностей должно иметь в справочниках системы код с точки зрения MyFace, который равен алиасу.
//     
// В %Profile_t - возвращается таблица описывающаяя вставленый субъект (ЮЛ или ФЛ)
// EKS 01.2020

// Хочешь узнать структуру таблицы %Profile_t вызови _QA->_GenRequizFace и в _QA._L2 получишь список полей с типами

var dt, FACE_ID, FIELDS, _QA_OPER;

_QA_OPER := 186;
FACE_ID  := clear(0);
FIELDS   := List();
TableClear(%Profile_t);

if (isBlank(%StDate)) then
    Dt := Date(Now)
else
    Dt := %StDate
end;    

SelectSQL('Данные', [ SELECT f.self_id 
                      FROM od_faces f
                          LEFT JOIN od_face_coders fc on fc.FACE = f.ID
                      WHERE f.LAST_FLAG = 1 and UPPER(TRIM(fc.CODE)) = :C and fc.CODER = :CODER], Trim(UpperCase(%Alias)), MyFace, FACE_ID, exit);
if isBlank(FACE_ID) then
    if TableFind(_QA.Generators, List('Alias='+UpperCase(%Alias))) then
        Eval('', [_QA->]+_QA.Generators._code+[(%Profile_t, Dt);]);
        try
            FACE_ID :=_QA->InsFace_t(%Profile_t);
        except
            raise([{ "placeType" : "Функция",
                     "placeName" : "_QA->InsFaceByAlias_t",
                      "mess"     : "Ошибка при вставке субъекта с кодом/тикером ]+ str(%Alias)+ [. Детали:]+Exception.text+["}]);
            //propagate;
        end;
    else
        raise([{ "placeType" : "Функция",
                 "placeName" : "_QA->InsFaceByAlias_t",
                  "mess"     : "В библиотеке нет шаблона субъекта с именем ]+ str(%Alias)+ ["}]);   
    end;
else
    // Если лицо с таким кодом уже есть в базе, то загрузим его в таблицу-профиль и вернем его SELF_ID
    _QA->LoadProfileFace_t( FACE_ID, %StDate, %Profile_t );    
end;

FACE_ID;